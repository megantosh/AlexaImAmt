// Author: Mohamed Megahed
// blueprint code for intents generated by SkillCode. based on the Fact blueprint.
// http://alexa.design/skillcode


//use after-load for pages with JavaScript, simulates browser behaviour
const https = require("https");
//alternatively, use fetch module in case of cookies handling, redirect etc
//const fetchUrl = require("fetch").fetchUrl;


//  ===== Helper Functions partially from AWS =========================================================================

exports.randomphrase = function randomPhrase(myArray) {
    return (myArray[Math.floor(Math.random() * myArray.length)]);
}

// returns slot resolved to an expected value if possible
exports.resolveCanonical = function resolveCanonical(slot) {
    try {
        var canonical = slot.resolutions.resolutionsPerAuthority[0].values[0].value.name;
    } catch (err) {
        console.log(err.message);
        var canonical = slot.value;
    }
    ;
    return canonical;
};

// used to emit :delegate to elicit or confirm Intent Slots
exports.delegateSlotCollection = function delegateSlotCollection() {
    console.log("current dialogState: " + this.event.request.dialogState);
    if (this.event.request.dialogState === "STARTED") {
        var updatedIntent = this.event.request.intent;

        this.emit(":delegate");

    } else if (this.event.request.dialogState !== "COMPLETED") {

        this.emit(":delegate");

    } else {
        console.log("returning: " + JSON.stringify(this.event.request.intent));

        return this.event.request.intent;
    }
}

exports.getCustomIntents = function getCustomIntents() {
    var customIntents = [];
    for (let i = 0; i < intentsReference.length; i++) {
        if (intentsReference[i].name.substring(0, 7) != "AMAZON." && intentsReference[i].name !== "LaunchRequest") {
            customIntents.push(intentsReference[i]);
        }
    }
    return (customIntents);
}
exports.cardIntents = function cardIntents(iArray) {
    var body = "";
    for (var i = 0; i < iArray.length; i++) {
        body += iArray[i].name + "\n";
        body += "  '" + iArray[i].samples[0] + "'\n";
    }
    return (body);
}


// ***********************************
// ** Helper functions from
// ** These should not need to be edited
// ** www.github.com/alexa/alexa-cookbook
// ***********************************

// ***********************************
// ** Route to Intent
// ***********************************

// after doing the logic in new session,
// route to the proper intent

exports.routeToIntent = function routeToIntent() {

    switch (this.event.request.type) {
        case 'IntentRequest':
            this.emit(this.event.request.intent.name);
            break;
        case 'LaunchRequest':
            this.emit('LaunchRequest');
            break;
        default:
            this.emit('LaunchRequest');
    }
}

// ***********************************
// ** Dialog Management
// ***********************************

exports.getSlotValues = function getSlotValues(filledSlots) {
    //given event.request.intent.slots, a slots values object so you have
    //what synonym the person said - .synonym
    //what that resolved to - .resolved
    //and if it's a word that is in your slot values - .isValidated
    let slotValues = {};

    console.log('The filled slots: ' + JSON.stringify(filledSlots));
    Object.keys(filledSlots).forEach(function (item) {
        //console.log("item in filledSlots: "+JSON.stringify(filledSlots[item]));
        var name = filledSlots[item].name;
        //console.log("name: "+name);
        if (filledSlots[item] &&
            filledSlots[item].resolutions &&
            filledSlots[item].resolutions.resolutionsPerAuthority[0] &&
            filledSlots[item].resolutions.resolutionsPerAuthority[0].status &&
            filledSlots[item].resolutions.resolutionsPerAuthority[0].status.code) {

            switch (filledSlots[item].resolutions.resolutionsPerAuthority[0].status.code) {
                case "ER_SUCCESS_MATCH":
                    slotValues[name] = {
                        "synonym"    : filledSlots[item].value,
                        "resolved"   : filledSlots[item].resolutions.resolutionsPerAuthority[0].values[0].value.name,
                        "isValidated": true
                    };
                    break;
                case "ER_SUCCESS_NO_MATCH":
                    slotValues[name] = {
                        "synonym"    : filledSlots[item].value,
                        "resolved"   : filledSlots[item].value,
                        "isValidated": false
                    };
                    break;
            }
        } else {
            slotValues[name] = {
                "synonym"    : filledSlots[item].value,
                "resolved"   : filledSlots[item].value,
                "isValidated": false
            };
        }
    }, this);
    //console.log("slot values: "+JSON.stringify(slotValues));
    return slotValues;
}
// This function delegates multi-turn dialogs to Alexa.
// For more information about dialog directives see the link below.
// https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html
exports.delegateSlotCollection = function delegateSlotCollection() {
    console.log("in delegateSlotCollection");
    console.log("current dialogState: " + this.event.request.dialogState);

    if (this.event.request.dialogState === "STARTED") {
        console.log("in STARTED");
        console.log(JSON.stringify(this.event));
        var updatedIntent = this.event.request.intent;
        // optionally pre-fill slots: update the intent object with slot values
        // for which you have defaults, then return Dialog.Delegate with this
        // updated intent in the updatedIntent property

        disambiguateSlot.call(this);
        console.log("disambiguated: " + JSON.stringify(this.event));
        this.emit(":delegate", updatedIntent);
    } else if (this.event.request.dialogState !== "COMPLETED") {
        console.log("in not completed");
        //console.log(JSON.stringify(this.event));

        disambiguateSlot.call(this);
        this.emit(":delegate", updatedIntent);
    } else {
        console.log("in completed");
        //console.log("returning: "+ JSON.stringify(this.event.request.intent));
        // Dialog is now complete and all required slots should be filled,
        // so call your normal intent handler.
        return this.event.request.intent.slots;
    }
    return null;
}
// If the user said a synonym that maps to more than one value, we need to ask
// the user for clarification. Disambiguate slot will loop through all slots and
// elicit confirmation for the first slot it sees that resolves to more than
// one value.
function disambiguateSlot() {
    let currentIntent = this.event.request.intent;
    let currentLocale = this.event.request.locale;

    Object.keys(this.event.request.intent.slots).forEach(function (slotName) {
        let currentSlot = this.event.request.intent.slots[slotName];
        let slotValue = slotHasValue(this.event.request, currentSlot.name);
        if (currentSlot.confirmationStatus !== 'CONFIRMED' &&
            currentSlot.resolutions &&
            currentSlot.resolutions.resolutionsPerAuthority[0]) {

            if (currentSlot.resolutions.resolutionsPerAuthority[0].status.code == 'ER_SUCCESS_MATCH') {
                // if there's more than one value that means we have a synonym that
                // mapped to more than one value. So we need to ask the user for
                // clarification. For example if the user said "mini dog", and
                // "mini" is a synonym for both "small" and "tiny" then ask "Did you
                // want a small or tiny dog?" to get the user to tell you
                // specifically what type mini dog (small mini or tiny mini).
                if (currentSlot.resolutions.resolutionsPerAuthority[0].values.length > 1) {

                    //give based on language
                    let prompt;
                    let prompt_or_text;
                    if (currentLocale == 'en-US') {
                        console.log('looking for disambiguations in english')
                        prompt = 'Which would you like';
                        prompt_or_text = ' or';
                    } else if (currentLocale == 'de-DE') {
                        console.log('wir suchen disambiguations auf deutsch')
                        prompt = 'Meinst du:  ';
                        prompt_or_text = '? oder '
                    } else prompt = 'ermm ';

                    let size = currentSlot.resolutions.resolutionsPerAuthority[0].values.length;
                    currentSlot.resolutions.resolutionsPerAuthority[0].values.forEach(function (element, index, arr) {
                        prompt += ` ${(index == size - 1) ? prompt_or_text : ' '} ${element.value.name}`;
                    });

                    prompt += '?';
                    let reprompt = prompt;
                    // In this case we need to disambiguate the value that they
                    // provided to us because it resolved to more than one thing so
                    // we build up our prompts and then emit elicitSlot.
                    this.emit(':elicitSlot', currentSlot.name, prompt, reprompt);
                }
            } else if (currentSlot.resolutions.resolutionsPerAuthority[0].status.code == 'ER_SUCCESS_NO_MATCH') {
                // Here is where you'll want to add instrumentation to your code
                // so you can capture synonyms that you haven't defined.
                console.log("NO MATCH FOR: ", currentSlot.name, " value: ", currentSlot.value);

                if (REQUIRED_SLOTS.indexOf(currentSlot.name) > -1) {
                    let prompt = "What " + currentSlot.name + " are you looking for";
                    this.emit(':elicitSlot', currentSlot.name, prompt, prompt);
                }
            }
        }
    }, this);
}

// Given the request an slot name, slotHasValue returns the slot value if one
// was given for `slotName`. Otherwise returns false.
function slotHasValue(request, slotName) {

    let slot = request.intent.slots[slotName];

    //uncomment if you want to see the request
    //console.log("request = "+JSON.stringify(request));
    let slotValue;

    //if we have a slot, get the text and store it into speechOutput
    if (slot && slot.value) {
        //we have a value in the slot
        slotValue = slot.value.toLowerCase();
        return slotValue;
    } else {
        //we didn't get a value in the slot.
        return false;
    }
}


//TODO twilio SMS with link to book appointment page (CAPTCHA is in the way),

//TODO parser to tell alexa which is the next free appointment...
//this is possible with the class calendar on the website
// siehe Note #hhibody > div:nth-child(3) > div.collapsible-body > div.calendar-table > div.row-fluid


// ***********************************
// ** Webservice Calls
// ***********************************

// make an http get request calls resolve upon completion and reject if there's an error.
// returns a promise -
exports.httpsGet = function httpsGet(options) {
    return new Promise(function (resolve, reject) {
        let request = https.request(options, response => {
            response.setEncoding('utf8');
            let returnData = "";

            if (response.statusCode < 200 || response.statusCode >= 300) {
                // we must return in this case
                // otherwise reject runs on the next tick and we'll get an error
                // when res.on('end') tries to parse the JSON.
                return reject(new Error(`${response.statusCode}: ${response.req.getHeader('host')} ${response.req.path}`));
            }

            response.on('data', chunk => {
                returnData = returnData + chunk;
            });

            response.on('end', () => {
                // we have now received the raw return data in the returnData variable.
                // We can see it in the log output via:
                console.log(JSON.stringify(returnData))
                // we may need to parse through it to extract the needed data

                let response = JSON.parse(returnData);
                // this will execute whatever the block of code that was passed to
                // httpGet and pass the JSON `response` to it.
                resolve(response);
            });

            response.on('error', error => {
                reject(error);
            });
        });
        request.end();
    });
}

// Creates the options object for an HTTPs GET Request
// Returns an object.
exports.buildHttpGetOptions = function buildHttpGetOptions(params) {
    let options = {
        hostname          : "newsreel-edu.aot.tu-berlin.de",
        path              : "/solr/d115/" + params, //buildQueryString(params),
        // port: port,
        method            : 'GET',
        rejectUnauthorized: false,
        auth              : "personal-assistent:AlexaAlexa0815."
    };
    return options;
}


//TODO might (not) need export! - complete with petmatch params
// Given a list of parameters it builds the query string for a request.
// Returns URI encoded string of parameters.
function buildQueryString(params) {
    let paramList = '';
    params.forEach((paramGroup, index) => {
        paramList += `${ index == 0 ? '?' : '&'}${encodeURIComponent(paramGroup[0])}=${encodeURIComponent(paramGroup[1])}`;
    });
    return paramList;

}


// an array to check against if a PLZ is in Berlin or not since Alexa gets the nearest answer and
// resolves 89102 to Pankow or so!

exports.listOfPLZAsDigits = ["10115", "10117", "10119", "10178", "10179", "10435", "10551", "10553", "10555", "10557",
    "10559", "10623", "10785", "10787", "10963", "10969", "13347", "13349", "13351", "13353", "13355", "13357", "13359",
    "13405", "13407", "13409", "10179", "10243", "10245", "10247", "10249", "10367", "10785", "10961", "10963", "10965",
    "10967",
    "10969", "10997", "10999", "12045", "10178", "10119", "10247", "10249", "10405", "10407", "10409", "10435", "10437",
    "10439", "13051", "13053", "13086", "13088", "13089", "13125", "13127", "13129", "13156", "13158", "13159", "13187",
    "13189", "10553", "10585", "10587", "10589", "10623", "10625", "10627", "10629", "10707", "10709", "10711", "10713",
    "10715",
    "10717", "10719", "10777", "10779", "10787", "10789", "10825", "13353", "13597", "13627", "13629", "14050", "14052",
    "14053",
    "14055", "14057", "14059", "14193", "14195", "14197", "14199", "13581", "13583", "13585", "13587", "13589", "13591",
    "13593", "13595", "13597", "13599", "13627", "13629", "14052", "14089", "12157", "12161", "12163", "12165", "12167",
    "12169", "12203", "12205", "12207", "12209", "12247", "12249", "12277", "12279", "14109", "14129", "14163", "14165",
    "14167",
    "14169", "14193", "14195", "14197", "14199", "10777", "10779", "10781", "10783", "10785", "10787", "10789", "10823",
    "10825", "10827", "10829", "10965", "12099", "12101", "12103", "12105", "12107", "12109", "12157", "12159", "12161",
    "12163", "12169", "12249", "12277", "12279", "12305", "12307", "12309", "12347", "14197", "10965", "10967", "12043",
    "12045", "12047", "12049", "12051", "12053", "12055", "12057", "12059", "12099", "12107", "12305", "12347", "12349",
    "12351",
    "12353", "12355", "12357", "12359", "12435", "12437", "12439", "12459", "12487", "12489", "12524", "12526", "12527",
    "12555", "12557", "12559", "12587", "12589", "12623", "", "12555", "12619", "12621", "12623", "12627", "12629",
    "12679", "12681", "12683", "12685", "12687", "12689", "10315", "10317", "10318", "10319", "10365", "10367", "10369",
    "13051", "13053", "13055", "13057", "13059", "13403", "13405", "13407", "13409", "13435", "13437", "13439", "13465",
    "13467", "13469", "13503", "13505", "13507", "13509", "13599", "13629"];

exports.listOfPLZ = ["eins null eins eins fünf", "eins null eins eins sieben", "eins null eins eins neun",
    "eins null eins sieben acht", "eins null eins sieben neun", "eins null vier drei fünf", "eins null fünf fünf eins",
    "eins null fünf fünf drei", "eins null fünf fünf fünf", "eins null fünf fünf sieben", "eins null fünf fünf neun",
    "eins null sechs zwei drei", "eins null sieben acht fünf", "eins null sieben acht sieben",
    "eins null neun sechs drei", "eins null neun sechs neun", "eins drei drei vier sieben", "eins drei drei vier neun",
    "eins drei drei fünf eins", "eins drei drei fünf drei", "eins drei drei fünf fünf", "eins drei drei fünf sieben",
    "eins drei drei fünf neun", "eins drei vier null fünf", "eins drei vier null sieben", "eins drei vier null neun",
    "eins null eins sieben neun", "eins null zwei vier drei", "eins null zwei vier fünf", "eins null zwei vier sieben",
    "eins null zwei vier neun", "eins null drei sechs sieben", "eins null sieben acht fünf",
    "eins null neun sechs eins", "eins null neun sechs drei", "eins null neun sechs fünf",
    "eins null neun sechs sieben", "eins null neun sechs neun", "eins null neun neun sieben",
    "eins null neun neun neun", "eins zwei null vier fünf", "eins null eins sieben acht", "eins null eins eins neun",
    "eins null zwei vier sieben", "eins null zwei vier neun", "eins null vier null fünf", "eins null vier null sieben",
    "eins null vier null neun", "eins null vier drei fünf", "eins null vier drei sieben", "eins null vier drei neun",
    "eins drei null fünf eins", "eins drei null fünf drei", "eins drei null acht sechs", "eins drei null acht acht",
    "eins drei null acht neun", "eins drei eins zwei fünf", "eins drei eins zwei sieben", "eins drei eins zwei neun",
    "eins drei eins fünf sechs", "eins drei eins fünf acht", "eins drei eins fünf neun", "eins drei eins acht sieben",
    "eins drei eins acht neun", "eins null fünf fünf drei", "eins null fünf acht fünf", "eins null fünf acht sieben",
    "eins null fünf acht neun", "eins null sechs zwei drei", "eins null sechs zwei fünf", "eins null sechs zwei sieben",
    "eins null sechs zwei neun", "eins null sieben null sieben", "eins null sieben null neun",
    "eins null sieben eins eins", "eins null sieben eins drei", "eins null sieben eins fünf",
    "eins null sieben eins sieben", "eins null sieben eins neun", "eins null sieben sieben sieben",
    "eins null sieben sieben neun", "eins null sieben acht sieben", "eins null sieben acht neun",
    "eins null acht zwei fünf", "eins drei drei fünf drei", "eins drei fünf neun sieben", "eins drei sechs zwei sieben",
    "eins drei sechs zwei neun", "eins vier null fünf null", "eins vier null fünf zwei", "eins vier null fünf drei",
    "eins vier null fünf fünf", "eins vier null fünf sieben", "eins vier null fünf neun", "eins vier eins neun drei",
    "eins vier eins neun fünf", "eins vier eins neun sieben", "eins vier eins neun neun", "eins drei fünf acht eins",
    "eins drei fünf acht drei", "eins drei fünf acht fünf", "eins drei fünf acht sieben", "eins drei fünf acht neun",
    "eins drei fünf neun eins", "eins drei fünf neun drei", "eins drei fünf neun fünf", "eins drei fünf neun sieben",
    "eins drei fünf neun neun", "eins drei sechs zwei sieben", "eins drei sechs zwei neun", "eins vier null fünf zwei",
    "eins vier null acht neun", "eins zwei eins fünf sieben", "eins zwei eins sechs eins", "eins zwei eins sechs drei",
    "eins zwei eins sechs fünf", "eins zwei eins sechs sieben", "eins zwei eins sechs neun", "eins zwei zwei null drei",
    "eins zwei zwei null fünf", "eins zwei zwei null sieben", "eins zwei zwei null neun", "eins zwei zwei vier sieben",
    "eins zwei zwei vier neun", "eins zwei zwei sieben sieben", "eins zwei zwei sieben neun",
    "eins vier eins null neun", "eins vier eins zwei neun", "eins vier eins sechs drei", "eins vier eins sechs fünf",
    "eins vier eins sechs sieben", "eins vier eins sechs neun", "eins vier eins neun drei", "eins vier eins neun fünf",
    "eins vier eins neun sieben", "eins vier eins neun neun", "eins null sieben sieben sieben",
    "eins null sieben sieben neun", "eins null sieben acht eins", "eins null sieben acht drei",
    "eins null sieben acht fünf", "eins null sieben acht sieben", "eins null sieben acht neun",
    "eins null acht zwei drei", "eins null acht zwei fünf", "eins null acht zwei sieben", "eins null acht zwei neun",
    "eins null neun sechs fünf", "eins zwei null neun neun", "eins zwei eins null eins", "eins zwei eins null drei",
    "eins zwei eins null fünf", "eins zwei eins null sieben", "eins zwei eins null neun", "eins zwei eins fünf sieben",
    "eins zwei eins fünf neun", "eins zwei eins sechs eins", "eins zwei eins sechs drei", "eins zwei eins sechs neun",
    "eins zwei zwei vier neun", "eins zwei zwei sieben sieben", "eins zwei zwei sieben neun",
    "eins zwei drei null fünf", "eins zwei drei null sieben", "eins zwei drei null neun", "eins zwei drei vier sieben",
    "eins vier eins neun sieben", "eins null neun sechs fünf", "eins null neun sechs sieben",
    "eins zwei null vier drei", "eins zwei null vier fünf", "eins zwei null vier sieben", "eins zwei null vier neun",
    "eins zwei null fünf eins", "eins zwei null fünf drei", "eins zwei null fünf fünf", "eins zwei null fünf sieben",
    "eins zwei null fünf neun", "eins zwei null neun neun", "eins zwei eins null sieben", "eins zwei drei null fünf",
    "eins zwei drei vier sieben", "eins zwei drei vier neun", "eins zwei drei fünf eins", "eins zwei drei fünf drei",
    "eins zwei drei fünf fünf", "eins zwei drei fünf sieben", "eins zwei drei fünf neun", "eins zwei vier drei fünf",
    "eins zwei vier drei sieben", "eins zwei vier drei neun", "eins zwei vier fünf neun", "eins zwei vier acht sieben",
    "eins zwei vier acht neun", "eins zwei fünf zwei vier", "eins zwei fünf zwei sechs", "eins zwei fünf zwei sieben",
    "eins zwei fünf fünf fünf", "eins zwei fünf fünf sieben", "eins zwei fünf fünf neun", "eins zwei fünf acht sieben",
    "eins zwei fünf acht neun", "eins zwei sechs zwei drei", "", "eins zwei fünf fünf fünf",
    "eins zwei sechs eins neun", "eins zwei sechs zwei eins", "eins zwei sechs zwei drei",
    "eins zwei sechs zwei sieben", "eins zwei sechs zwei neun", "eins zwei sechs sieben neun",
    "eins zwei sechs acht eins", "eins zwei sechs acht drei", "eins zwei sechs acht fünf",
    "eins zwei sechs acht sieben", "eins zwei sechs acht neun", "eins null drei eins fünf",
    "eins null drei eins sieben", "eins null drei eins acht", "eins null drei eins neun", "eins null drei sechs fünf",
    "eins null drei sechs sieben", "eins null drei sechs neun", "eins drei null fünf eins", "eins drei null fünf drei",
    "eins drei null fünf fünf", "eins drei null fünf sieben", "eins drei null fünf neun", "eins drei vier null drei",
    "eins drei vier null fünf", "eins drei vier null sieben", "eins drei vier null neun", "eins drei vier drei fünf",
    "eins drei vier drei sieben", "eins drei vier drei neun", "eins drei vier sechs fünf",
    "eins drei vier sechs sieben", "eins drei vier sechs neun", "eins drei fünf null drei", "eins drei fünf null fünf",
    "eins drei fünf null sieben", "eins drei fünf null neun", "eins drei fünf neun neun", "eins drei sechs zwei neun"];

exports.listOfAreas = ["Oberschöneweide", "müggelheim", "johannisthal", "friedrichshagen", "Baumschulenweg",
    "Altglienicke", "schmöckwitz", "plänterwald", "niederschöneweide", "grünau", "bohnsdorf", "alt-treptow",
    "adlershof", "Schöneweide", "köpenick", "Friedenau", "Mariendorf", "Marienfelde", "Lichtenrade", "Schöneberg",
    "Tempelhof", "wannsee", "nikolassee", "lichterfelde", "dahlem", "Zehlendorf", "Steglitz", "Lankwitz",
    "wilhelmstadt", "staaken", "siemensstadt", "haselhorst", "gatow", "Falkenhagener Feld", "Wasserstadt", "Kladow",
    "waldmanslust", "lübars", "konradshöhe", "frohnau", "borgiswalde", "wittenau", "Heiligensee", "Märkisches Viertel",
    "Tegel", "Hermsdorf", "Reinickendorf Ost", "malchow", "stadtrandsiedlung malchow", "heinersdorf", "blankenburg",
    "wilhelmsruh", "rosenthal", "niederschönhausen", "blankenfelde", "alt-pankow", "französisch buchholz", "buchholz",
    "Buch", "Karow", "Weißensee", "Prenzlauer Berg", "britz", "nord-neukölln", "gropiusstadt", "Buckow",
    "Blaschkoallee", "Sonnenallee", "Zwickauer Damm", "Alt Buckow", "Rudow", "hansaviertel", "moabit", "gesundbrunnen",
    "Wedding", "Tiergarten", "hellersdorf", "marzahn", "mahlsdorf", "Marzahner Promenade", "Helle Mitte", "Biesdorf",
    "Malchow", "Falkenberg", "wartenberg", "neu hohen schönhausen", "hsh", "alt hohen schön Hausen", "fennpfuhl",
    "alt-lichtenberg", "frierdrichsfelde", "karlshorst", "rummelsburg", "Zentrum Ikraus", "Am Obersee", "Käthe Kern",
    "Anton Saefkow", "Große Leege ", "Alt Hohen Schön Hausen", "Tierparkcenter", "Normannen", "Egon - Erwin Kirsch ",
    "Neu Hohen Schön Hausen", "friedrichshain", "S. O. sechsunddreißig", "boxhagen", "boxi", "stralau",
    "Schlesische Straße", "Frankfurter Allee", "Kreuzberg", "Yorkstraße", "Charlottenburg", "Charlottenburg-Nord",
    "Grunewald", "Halensee", "Schmargendorf", "Westend", "Wilmersdorf", "Halemweg", "Heerstraße", "Hohenzollerndamm",
    "Wilmersdorfer"];

exports.listOfComboDistricts = ["Friedrichshain-Kreuzberg", "Charlottenburg-Wilmersdorf", "Lichtenberg",
    "Marzahn-Hellersdorf", "Mitte", "Neukölln", "Pankow", "Reinickendorf", "Spandau", "Steglitz-Zehlendorf",
    "Tempelhof-Schöneberg", "Treptow-Köpenick"];


// Language Model  for reference
var interactionModel = [
    {
        "name"   : "AMAZON.CancelIntent",
        "samples": []
    },
    {
        "name"   : "AMAZON.HelpIntent",
        "samples": []
    },
    {
        "name"   : "AMAZON.StopIntent",
        "samples": []
    },
    {
        "name"   : "DL_AufenthaltstitelIntent",
        "slots"  : [],
        "samples": []
    },
    {
        "name"   : "BafoegIntent",
        "slots"  : [],
        "samples": []
    },
    {
        "name"   : "ApprobationIntent",
        "slots"  : [],
        "samples": []
    },
    {
        "name"   : "DL_generalIntent",
        "slots"  : [
            {
                "name": "Dienstleistung",
                "type": "EN_LIST_OF_PUBLIC_SVCS_BLN"
            },
            {
                "name"   : "prerequisites",
                "type"   : "EN_YES_NO_FLAG",
                "samples": [
                    "{prerequisites} please"
                ]
            }
        ],
        "samples": [
            "how do i {Dienstleistung}",
            "i want to {Dienstleistung}",
            "i would like to {Dienstleistung}"
        ]
    },
    {
        "name"   : "ST_BerlinQuestions",
        "slots"  : [],
        "samples": []
    },
    {
        "name"   : "ST_FutureTODOs",
        "slots"  : [
            {
                "name": "DogName",
                "type": "AMAZON.US_FIRST_NAME"
            },
            {
                "name": "futureIntent",
                "type": "Todo_List"
            }
        ],
        "samples": [
            "I need an apartment",
            "where can I {futureIntent}",
            "I want to go bathing",
            "I need a house",
            "I lost my Meldebscheinigung",
            "where do I find {DogName}",
            "where did my dog go",
            "where do I find my lost dog",
            "how can I find my dog",
            "I lost my dog",
            "ich habe ein Kind bekommen wo kann ich eine geburtsurkunde beantragen"
        ]
    },
    {
        "name": "LaunchRequest"
    }
];


var intentsReference = [
    {
        "name"   : "AMAZON.CancelIntent",
        "samples": []
    },
    {
        "name"   : "AMAZON.HelpIntent",
        "samples": []
    },
    {
        "name"   : "AMAZON.StopIntent",
        "samples": []
    },
    {
        "name"   : "DL_AufenthaltstitelIntent",
        "slots"  : [],
        "samples": []
    },
    {
        "name"   : "BafoegIntent",
        "slots"  : [],
        "samples": []
    },
    {
        "name"   : "ApprobationIntent",
        "slots"  : [],
        "samples": []
    },
    {
        "name"   : "DL_generalIntent",
        "slots"  : [
            {
                "name": "Dienstleistung",
                "type": "EN_LIST_OF_PUBLIC_SVCS_BLN"
            },
            {
                "name"   : "prerequisites",
                "type"   : "EN_YES_NO_FLAG",
                "samples": [
                    "{prerequisites} please"
                ]
            }
        ],
        "samples": [
            "how do i {Dienstleistung}",
            "i want to {Dienstleistung}",
            "i would like to {Dienstleistung}"
        ]
    },
    {
        "name"   : "ST_BerlinQuestions",
        "slots"  : [],
        "samples": []
    },
    {
        "name"   : "ST_FutureTODOs",
        "slots"  : [
            {
                "name": "DogName",
                "type": "AMAZON.US_FIRST_NAME"
            },
            {
                "name": "futureIntent",
                "type": "Todo_List"
            }
        ],
        "samples": [
            "I need an apartment",
            "where can I {futureIntent}",
            "I want to go bathing",
            "I need a house",
            "I lost my Meldebscheinigung",
            "where do I find {DogName}",
            "where did my dog go",
            "where do I find my lost dog",
            "how can I find my dog",
            "I lost my dog",
            "ich habe ein Kind bekommen wo kann ich eine geburtsurkunde beantragen"
        ]
    },
    {
        "name": "LaunchRequest"
    }
];
