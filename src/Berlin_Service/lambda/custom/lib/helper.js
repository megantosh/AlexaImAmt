// Author: Mohamed Megahed
// blueprint code for intents generated by SkillCode. based on the Fact blueprint.
// http://alexa.design/skillcode

{
// promise syntax (for asynchronous calls):
// read here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise
const myFirstPromise = new Promise((resolve, reject) => {
    // do something asynchronous which eventually calls either:
    //
    //   resolve(someValue); // fulfilled
    // or
    //   reject("failure reason"); // rejected
});

// anynymous functions syntax:
    const doSomething = (args) =>{
        "use strict";
    }

}





//use after-load for pages with JavaScript, simulates browser behaviour
const https = require("https");
//alternatively, use fetch module in case of cookies handling, redirect etc
//const fetchUrl = require("fetch").fetchUrl;
const util = require('util');



//TODO b4s duplicate latest models into modelDuplicates
const de_DE_model = require('./modelDuplicates/de-DE.json');
const en_US_model = require('./modelDuplicates/en-US.json');

// minor uses in code (e.g. getCustomIntent)
const de_DE_intentsArray = de_DE_model.interactionModel.languageModel.intents;
const en_US_intentsArray = en_US_model.interactionModel.languageModel.intents;




//  ===== Helper Functions - Blueprints partially from AWS and MDN ====================================================


// return index of a speech array to randomize utterances
exports.randomphrase = function randomPhrase(myArray) {
    return (myArray[Math.floor(Math.random() * myArray.length)]);
}

// returns slot resolved to first expected value if possible (i.e. best match)
exports.resolveCanonical = function resolveCanonical(slot) {
    let canonical;
    try {
        //TODO changed from var!
        console.log('resolving canonical value - chgd frm var2let');
        canonical = slot.resolutions.resolutionsPerAuthority[0].values[0].value.name;
    } catch (err) {
        console.log('Slot Value unresolved: ' + err.message);
        canonical = slot.value;
    }
    return canonical;
};


// returns list of resolved values in best match order (best match == 0)
exports.resolveMulti = function resolveMulti(slot) {
    try {
        let multiCanonical =[];
        for(i = 0; i < slot.resolutions.resolutionsPerAuthority[0].values.length; i++){
            multiCanonical.push(slot.resolutions.resolutionsPerAuthority[0].values[i].value.name);
        }
    } catch (err) {
        console.log(err.message);
        multiCanonical = slot.value;
    }
    return multiCanonical;
};



// used to emit :delegate to elicit or confirm Intent Slots
exports.delegateSlotCollection = function delegateSlotCollection() {
    console.log("current dialogState: " + this.event.request.dialogState);
    if (this.event.request.dialogState === "STARTED") {
        var updatedIntent = this.event.request.intent;

        this.emit(":delegate");

    } else if (this.event.request.dialogState !== "COMPLETED") {

        this.emit(":delegate");

    } else {
        console.log("returning: " + JSON.stringify(this.event.request.intent));

        return this.event.request.intent;
    }
}







//return a list of defined custom intents in the model based on user's locale
exports.getCustomIntents = function getCustomIntents(currentLocale) {
    let all_intentsArray;
    // dynamic referencing to the direct interaction model
    // TODO+ add other language models as they become available
    if (currentLocale == 'de_DE')
        all_intentsArray = de_DE_intentsArray;
    else if (currentLocale == 'en_US')
        all_intentsArray = en_US_intentsArray;
    else all_intentsArray = de_DE_intentsArray.concat(en_US_intentsArray);

    console.log("All available Intents : " + util.inspect(all_intentsArray));

    let customIntents = [];
    for (let i = 0; i < all_intentsArray.length; i++) {
        if (all_intentsArray[i].name.substring(0, 7) != "AMAZON." && all_intentsArray[i].name !== "LaunchRequest") {
            customIntents.push(all_intentsArray[i]);
        }
    }

    console.log('Type of CustomIntents: ' + typeof customIntents)
    console.log('Contents: ' + customIntents);
        console.log(util.inspect(customIntents,false,null));
    // for (i = 0; i < customIntents.length; i++){
    //
    // }
    return (customIntents);
}



exports.cardIntents = function cardIntents(iArray, locale) {
    let body = "";
    let i = Math.floor(Math.random() * iArray.length);
    let j = Math.floor(Math.random() * iArray.length);
//    use a for loop only in conjunction with a card display template, otherwise the same screen is boring every time!
//    for (let i = 0; i < iArray.length; i++) {

    body += exports.extractHumanReadableIntent(iArray[i].name) + "\n\n";
    body += "  > " +
            exports.extractHumanReadableSample(iArray[i].samples[iArray.length * Math.floor(Math.random())], locale) + "\n\n";

    body += exports.extractHumanReadableIntent(iArray[j].name) + "\n\n";
    body += "  > " +
            exports.extractHumanReadableSample(iArray[j].samples[iArray.length * Math.floor(Math.random())], locale) + "\n\n";


    return (body);
}




exports.writeDigits = function writeDigits(inputText, locale){
    let outputDigits = inputText;

    console.log('converting: ' + inputText + ' to digits if possible.');
    console.log('using Handler locale: ' + locale);

    // WARN: do not extend and avoid the next line!
    // inputText.String.prototype.replaceAll('eins', '1');

    // DE
    if (locale =='de_DE' && !blacklist.includes(inputText)) {
        outputDigits = outputDigits.replace(/null/gi, '0');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/eins/gi, '1');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/zwei/gi, '2');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/zwo/gi, '2');   // just in case
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/drei/gi, '3');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/vier/gi, '4');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/fünf/gi, '5');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/sechs/gi, '6');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/sieben/gi, '7');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/acht/gi, '8');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/neun/gi, '9');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/zehn/gi, '10');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/elf/gi, '11');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/zwölf/gi, '12');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/dreizehn/gi, '13');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/vierzehn/gi, '14');
        // console.log('converted: ' + outputDigits);
        outputDigits = outputDigits.replace(/fünfzehn/gi, '15');
        // console.log('converted: ' + outputDigits);
    } else if (locale == 'en_US' && blacklist.includes(inputText)) {
        outputDigits = outputDigits.replace(/zero/gi, '0');
        outputDigits = outputDigits.replace(/oh/gi, '0');    // TODO not sure how it's transcribed
        outputDigits = outputDigits.replace(/one/gi, '1');
        outputDigits = outputDigits.replace(/two/gi, '2');
        outputDigits = outputDigits.replace(/three/gi, '3');
        outputDigits = outputDigits.replace(/four/gi, '4');
        outputDigits = outputDigits.replace(/five/gi, '5');
        outputDigits = outputDigits.replace(/six/gi, '6');
        outputDigits = outputDigits.replace(/seven/gi, '7');
        outputDigits = outputDigits.replace(/eight/gi, '8');
        outputDigits = outputDigits.replace(/nine/gi, '9');
        outputDigits = outputDigits.replace(/ten/gi, '10');
        outputDigits = outputDigits.replace(/eleven/gi, '11');
        outputDigits = outputDigits.replace(/twelve/gi, '12');
        outputDigits = outputDigits.replace(/thirteen/gi, '13');
        outputDigits = outputDigits.replace(/fourteen/gi, '14');
        outputDigits = outputDigits.replace(/fifteen/gi, '15');
    }

    if(outputDigits.toLowerCase().includes(('a'||'b'||'c'||'d'||'e'||'f'||'g'||'h'||'i'||'j'||'k'||'l'||'m'||'n'||'o'||
            'p'||'q'||'r'||'s'||'t'||'u'||'w'||'w'||'x'||'y'||'z'))
        && listOfNoHyphenAreas.includes(outputDigits.toLowerCase()) == false )
        outputDigits = outputDigits.replace(' ', '-');
    // else if (outputDigits.startsWith('1'))
        outputDigits = outputDigits.replace(/ +/g, '');
    // or .replace(/\s+/g, '');


    console.log(outputDigits);
    return outputDigits.toUpperCase();
}


exports.coatOfArmsSelector = function coatOfArmsSelector(resolved) {
    let cardImg;

    try {
        if (resolved == 'Charlottenburg-Wilmersdorf')
            cardImg = Card.berlinWappen.charlottenburg_wilmersdorf;
        else if (resolved == 'Friedrichshain-Kreuzberg')
            cardImg = Card.berlinWappen.friedrichshain_kreuzberg;
        else if (resolved == 'Lichtenberg')
            cardImg = Card.berlinWappen.lichtenberg;
        else if (resolved == 'Marzahn-Hellersdorf')
            cardImg = Card.berlinWappen.marzahn_hellersdorf;
        else if (resolved == 'Mitte')
            cardImg = Card.berlinWappen.mitte;
        else if (resolved == 'Neukölln')
            cardImg = Card.berlinWappen.neukölln;
        else if (resolved == 'Pankow')
            cardImg = Card.berlinWappen.pankow;
        else if (resolved == 'Reinickendorf')
            cardImg = Card.berlinWappen.reinickendorf;
        else if (resolved == 'Spandau')
            cardImg = Card.berlinWappen.spandau;
        else if (resolved == 'Steglitz-Zehlendorf')
            cardImg = Card.berlinWappen.steglitz_zehlendorf;
        else if (resolved == 'Tempelhof-Schöneberg')
            cardImg = Card.berlinWappen.tempelhof_schöneberg;
        else if (resolved == 'Treptow-Köpenick')
            cardImg = Card.berlinWappen.treptow_köpenick;
        else cardImg = Card.logo;
    } catch (err) {
        console.log(err.message);
    } finally {
        return cardImg;
    }



}


exports.coatOfArmsTextSelector = function coatOfArmsTextSelector(resolved) {
    let cardImg;

    try {
        if (resolved == 'Charlottenburg-Wilmersdorf')
            cardImg = 'charlottenburg_wilmersdorf';
        else if (resolved == 'Friedrichshain-Kreuzberg')
            cardImg = 'friedrichshain_kreuzberg';
        else if (resolved == 'Lichtenberg')
            cardImg = 'lichtenberg';
        else if (resolved == 'Marzahn-Hellersdorf')
            cardImg = 'marzahn_hellersdorf';
        else if (resolved == 'Mitte')
            cardImg = 'mitte';
        else if (resolved == 'Neukölln')
            cardImg = 'neukölln';
        else if (resolved == 'Pankow')
            cardImg = 'pankow';
        else if (resolved == 'Reinickendorf')
            cardImg = 'reinickendorf';
        else if (resolved == 'Spandau')
            cardImg = 'spandau';
        else if (resolved == 'Steglitz-Zehlendorf')
            cardImg = 'steglitz_zehlendorf';
        else if (resolved == 'Tempelhof-Schöneberg')
            cardImg = 'tempelhof_schöneberg';
        else if (resolved == 'Treptow-Köpenick')
            cardImg = 'treptow_köpenick';
        else cardImg = 'logo';
    } catch (err) {
        console.log(err.message);
    } finally {
        return cardImg;
    }
}

// ***********************************
// ** Helper functions from
// ** These should not need to be edited
// ** www.github.com/alexa/alexa-cookbook
// ***********************************

// ***********************************
// ** Route to Intent
// ***********************************

// after doing the logic in new session,
// route to the proper intent
// so far not used since we do not retain over sessions

exports.routeToIntent = function routeToIntent() {

    switch (this.event.request.type) {
        case 'IntentRequest':
            this.emit(this.event.request.intent.name);
            break;
        case 'LaunchRequest':
            this.emit('LaunchRequest');
            break;
        default:
            this.emit('LaunchRequest');
    }
}

// ***********************************
// ** Dialog Management
// ***********************************

exports.getSlotValues = function getSlotValues(filledSlots) {
    //given event.request.intent.slots, a slots values object so you have
    //what synonym the person said - .synonym
    //what that resolved to - .resolved
    //and if it's a word that is in your slot values - .isValidated
    let slotValues = {};

    console.log('The filled slots: ' + JSON.stringify(filledSlots));
    Object.keys(filledSlots).forEach(function (item) {
        //console.log("item in filledSlots: "+JSON.stringify(filledSlots[item]));
        var name = filledSlots[item].name;
        //console.log("name: "+name);
        if (filledSlots[item] &&
            filledSlots[item].resolutions &&
            filledSlots[item].resolutions.resolutionsPerAuthority[0] &&
            filledSlots[item].resolutions.resolutionsPerAuthority[0].status &&
            filledSlots[item].resolutions.resolutionsPerAuthority[0].status.code) {

            switch (filledSlots[item].resolutions.resolutionsPerAuthority[0].status.code) {
                case "ER_SUCCESS_MATCH":
                    slotValues[name] = {
                        "synonym"    : filledSlots[item].value,
                        "resolved"   : filledSlots[item].resolutions.resolutionsPerAuthority[0].values[0].value.name,
                        "isValidated": true
                    };
                    break;
                case "ER_SUCCESS_NO_MATCH":
                    slotValues[name] = {
                        "synonym"    : filledSlots[item].value,
                        "resolved"   : filledSlots[item].value,
                        "isValidated": false
                    };
                    break;
            }
        } else {
            slotValues[name] = {
                "synonym"    : filledSlots[item].value,
                "resolved"   : filledSlots[item].value,
                "isValidated": false
            };
        }
    }, this);
    console.log("slot values: "+JSON.stringify(slotValues));
    return slotValues;
}
// This function delegates multi-turn dialogs to Alexa.
// For more information about dialog directives see the link below.
// https://developer.amazon.com/docs/custom-skills/dialog-interface-reference.html
exports.delegateSlotCollection = function delegateSlotCollection() {
    console.log("in delegateSlotCollection");
    console.log("current dialogState: " + this.event.request.dialogState);

    if (this.event.request.dialogState === "STARTED") {
        console.log("in STARTED");
        console.log(JSON.stringify(this.event));
        var updatedIntent = this.event.request.intent;
        // optionally pre-fill slots: update the intent object with slot values
        // for which you have defaults, then return Dialog.Delegate with this
        // updated intent in the updatedIntent property

        disambiguateSlot.call(this);
        console.log("disambiguated: " + JSON.stringify(this.event));
        this.emit(":delegate", updatedIntent);
    } else if (this.event.request.dialogState !== "COMPLETED") {
        console.log("in not completed");
        //console.log(JSON.stringify(this.event));

        disambiguateSlot.call(this);
        this.emit(":delegate", updatedIntent);
    } else {
        console.log("in completed");
        //console.log("returning: "+ JSON.stringify(this.event.request.intent));
        // Dialog is now complete and all required slots should be filled,
        // so call your normal intent handler.
        return this.event.request.intent.slots;
    }
    return null;
}
// If the user said a synonym that maps to more than one value, we need to ask
// the user for clarification. Disambiguate slot will loop through all slots and
// elicit confirmation for the first slot it sees that resolves to more than
// one value.
function disambiguateSlot() {
    let currentIntent = this.event.request.intent;
    let currentLocale = this.event.request.locale;

    Object.keys(this.event.request.intent.slots).forEach(function (slotName) {
        let currentSlot = this.event.request.intent.slots[slotName];
        let slotValue = slotHasValue(this.event.request, currentSlot.name);
        if (currentSlot.confirmationStatus !== 'CONFIRMED' &&
            currentSlot.resolutions &&
            currentSlot.resolutions.resolutionsPerAuthority[0]) {

            if (currentSlot.resolutions.resolutionsPerAuthority[0].status.code == 'ER_SUCCESS_MATCH') {
                // if there's more than one value that means we have a synonym that
                // mapped to more than one value. So we need to ask the user for
                // clarification. For example if the user said "mini dog", and
                // "mini" is a synonym for both "small" and "tiny" then ask "Did you
                // want a small or tiny dog?" to get the user to tell you
                // specifically what type mini dog (small mini or tiny mini).
                if (currentSlot.resolutions.resolutionsPerAuthority[0].values.length > 1) {

                    //give based on language
                    let prompt;
                    let prompt_or_text;
                    if (currentLocale == 'en-US') {
                        console.log('looking for disambiguations in english')
                        prompt = 'Which would you like';
                        prompt_or_text = ' or';
                    } else if (currentLocale == 'de-DE') {
                        console.log('wir suchen disambiguations auf deutsch')
                        prompt = 'Meinen Sie:  ';
                        prompt_or_text = '? oder '
                    } else prompt = 'ermm ';

                    let size = currentSlot.resolutions.resolutionsPerAuthority[0].values.length;
                    currentSlot.resolutions.resolutionsPerAuthority[0].values.forEach(function (element, index, arr) {
                        prompt += ` ${(index == size - 1) ? prompt_or_text : ' '} ${element.value.name}`;
                    });

                    prompt += '?';
                    let reprompt = prompt;
                    // In this case we need to disambiguate the value that they
                    // provided to us because it resolved to more than one thing so
                    // we build up our prompts and then emit elicitSlot.
                    this.emit(':elicitSlot', currentSlot.name, prompt, reprompt);
                }
            } else if (currentSlot.resolutions.resolutionsPerAuthority[0].status.code == 'ER_SUCCESS_NO_MATCH') {
                // Here is where you'll want to add instrumentation to your code
                // so you can capture synonyms that you haven't defined.
                console.log("NO MATCH FOR: ", currentSlot.name, " value: ", currentSlot.value);

                if (REQUIRED_SLOTS.indexOf(currentSlot.name) > -1) {
                    let prompt = "What " + currentSlot.name + " are you looking for";
                    this.emit(':elicitSlot', currentSlot.name, prompt, prompt);
                }
            }
        }
    }, this);
}

// Given the request an slot name, slotHasValue returns the slot value if one
// was given for `slotName`. Otherwise returns false.
function slotHasValue(request, slotName) {

    let slot = request.intent.slots[slotName];

    //uncomment if you want to see the request
    //console.log("request = "+JSON.stringify(request));
    let slotValue;

    //if we have a slot, get the text and store it into speechOutput
    if (slot && slot.value) {
        //we have a value in the slot
        slotValue = slot.value.toLowerCase();
        return slotValue;
    } else {
        //we didn't get a value in the slot.
        return false;
    }
}


//TODO twilio SMS with link to book appointment page (CAPTCHA is in the way),

//TODO parser to tell alexa which is the next free appointment...
//this is possible with the class calendar on the website
// siehe Note #hhibody > div:nth-child(3) > div.collapsible-body > div.calendar-table > div.row-fluid



// ***********************************
// ** String Cleaners
// ***********************************

exports.reformatHTMLtoAlexaFriendly = function reformatHTMLtoAlexaFriendly(inputString) {

    //regex ref
    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions

    //remove hyperlinks
    // https://stackoverflow.com/questions/960156/regex-in-javascript-to-remove-links
    inputString = inputString.replace(/<a\b[^>]*>(.*?)<\/a>/gi, '');

    //remove unnecessary words:
    inputString = inputString.replace(/Mehr zum Thema: /gi, '');

    inputString = '<p> ' + inputString;
    inputString = inputString.replace(/<br\s*[\/]?>/gi, '</p> <p>');
    inputString = inputString.replace(/\n./g,'.');
    inputString = inputString.replace(/\n/g,'.');
    inputString = inputString.replace(/\ -\ /g,'.');
    inputString = inputString.replace(/\\n/g, '');
    inputString = inputString.replace(/<p>\n<\/p>/,'');
    inputString = inputString.replace(/<ul\ class=\\"list\\">/gi, '');
    inputString = inputString.replace(/<ul\ class=\\\"list\\\">/gi, '');
    inputString = inputString.replace(/<\/ul>/gi, '');
    inputString = inputString.replace(/<ul class="list">(.*?)<\/ul>/g, function(a,s){return s;});
    inputString = inputString.replace(/<li>/gi, '. ');
    inputString = inputString.replace(/<\/li>/gi, '');
    inputString = inputString.replace(/&quot;/gi, ' " ');



    //Apply SSML or remove with /<\/?strong>/g
    // inputString = inputString.replace(/<\/?strong>/g,'<prosody volume="x-loud">');
    inputString = inputString.replace(/<\/?strong>/g,'.');
    inputString += ' </p>';

    return inputString;
    }






exports.reformatJSONtoAlexaFriendly = function reformatJSONtoAlexaFriendly(inputString) {

    //regex ref
    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions

    //remove hyperlinks
    // https://stackoverflow.com/questions/960156/regex-in-javascript-to-remove-links
    inputString = inputString.replace(/<a\b[^>]*>(.*?)<\/a>/gi, '');

    //remove unnecessary words:
    inputString = inputString.replace(/Mehr zum Thema: /gi, '');

    // inputString = '<p> ' + inputString;
    inputString = inputString.replace(/<p>/gi, '');
    inputString = inputString.replace(/\n./g,'.');
    inputString = inputString.replace(/\n/g,'.');
    inputString = inputString.replace(/\ -\ /g,'.');
    inputString = inputString.replace(/\\n/g, '');
    inputString = inputString.replace(/<p>\n<\/p>/,'');
    inputString = inputString.replace(/<ul\ class=\\"list\\">/gi, '');
    inputString = inputString.replace(/<ul\ class=\\\"list\\\">/gi, '');
    inputString = inputString.replace(/<\/ul>/gi, '');
    inputString = inputString.replace(/<ul class="list">(.*?)<\/ul>/g, function(a,s){return s;});
    inputString = inputString.replace(/<li>/gi, '. ');
    inputString = inputString.replace(/<\/li>/gi, '');
    inputString = inputString.replace(/&quot;/gi, ' " ');
    inputString = inputString.replace(/\[\";/gi, ' " ');
    inputString = inputString.replace(/\[\"/gi, ' " ');
    inputString = inputString.replace(/\["/gi, ' " ');
    inputString = inputString.replace(/<\/p>/gi, '');
    inputString = inputString.replace(/:::/gi, '-');
    inputString = inputString.replace(/\"\];/gi, ' " ');
    inputString = inputString.replace(/\"]/gi, ' " ');
    inputString = inputString.replace(/"\]/gi, ' " ');








    //Apply SSML or remove with /<\/?strong>/g
    // inputString = inputString.replace(/<\/?strong>/g,'<prosody volume="x-loud">');
    inputString = inputString.replace(/<\/?strong>/g,'.');
    inputString += ' </p>';

    return inputString;
}

// <br />\n

exports.extractHumanReadableIntent = function extractHumanReadableIntent(IntentName){
    console.log('caught name: ' + IntentName);
    if(IntentName.includes('_Intent_'))
        IntentName = IntentName.split('_Intent_')[1];
    IntentName = IntentName.replace(/_/gi, ' ');
    IntentName = IntentName.replace(/oe/g, 'ö');
    IntentName = IntentName.replace(/ae/g, 'ä');
    IntentName = IntentName.replace(/ue/g, 'ü');
    IntentName = IntentName.replace(/AE/g, 'Ä');
    IntentName = IntentName.replace(/OE/g, 'Ö');
    IntentName = IntentName.replace(/UE/g, 'Ü');
    return IntentName;

}


exports.extractHumanReadableSample = function extractHumanReadableSample(utterance, locale) {
    let possibleLocations = exports.listOfAreas.concat(exports.listOfPLZ) ;

    console.log('caught utterance: ' + utterance);
    console.log('type of utterance: ' + typeof utterance);
    console.log('utterance inspection: '+  util.inspect(utterance));


    switch(locale) {
        case 'de_DE':
            // if (utterance.toLowercase().indexOf("{dienstleistung} " >= 0)){
            utterance= utterance.replace(/ {Dienstleistung}/gi, ", dann Name Der Dienstleistung, beispielsweise" +
                " \'Perso\' "); //dann....
            utterance= utterance.replace(/ {extension_flag}/gi, " verlängern ");
            utterance= utterance.replace(/\s{prerequisites_flag}/gi, ". Was brauche ich dafür? ");//Bedingungen muss
            // ich erfüllen für
            utterance= utterance.replace(/\s{description_flag}/gi, " Was bedeutet ");
            utterance= utterance.replace(/\s{required_docs_flag}/gi, " Welche Unterlagen brauche ich für ");
            utterance= utterance.replace(/\s{costs_flag}/gi, " Was kostet ");
            utterance= utterance.replace(/\s{processing_time_flag}/gi, " Wie lange dauert die Bearbeitung für ");
            utterance= utterance.replace(/\s{book_appointment_flag}/gi, " Ich möchte einen Termin buchen für");
            utterance= utterance.replace(/\s{onlineAntrag}/gi, " online ");
            //TODO randomphrase(possibleLocations); //zehn neun neun neun
            utterance= utterance.replace(/\s{plz_district}/gi,  ' zehn neun neun neun');
            utterance= utterance.replace(/\s{location}/gi, " Kreuzberg ");
            utterance= utterance.replace(/\s{BerufGesundheit}/gi, " Arzt ");
            utterance= utterance.replace(/\s{bafoegType}/gi, " Bafög ");
            utterance= utterance.replace(/\s{citizenship}/gi, " als Ägypter ");
            utterance= utterance.replace(/\s{smalltalk}/gi, " Wie siehst du denn aus? ");  //TODO geht nicht!
            utterance= utterance.replace(/{smalltalk}/gi, " Wie siehst du denn aus? ");  //TODO geht nicht!


            utterance= utterance.replace(/ {statistic}/gi, " dann zum beispiel Bezirksämter ");
            utterance= utterance.replace(/ {district_combo_name}/gi, " zum beispiel Charlottenburg ");
            break;

        case 'en_US':
            // if (utterance.toLowercase().indexOf("{dienstleistung} " >= 0))
                utterance= utterance.replace(/{Dienstleistung}/gi, ", then Name of the Service, then ");
            break;
    }

    console.log('human-readable utterance: ' + utterance);

        return utterance;
}


// ***********************************
// ** Webservice Calls
// ***********************************

// make an http get request calls resolve upon completion and reject if there's an error.
// returns a promise -
exports.httpsGet = function httpsGet(options) {
    return new Promise(function (resolve, reject) {
        let request = https.request(options, response => {
            response.setEncoding('utf8');
            let returnData = "";

            if (response.statusCode < 200 || response.statusCode >= 300) {
                // we must return in this case
                // otherwise reject runs on the next tick and we'll get an error
                // when res.on('end') tries to parse the JSON.
                return reject(new Error(`${response.statusCode}: ${response.req.getHeader('host')} ${response.req.path}`));
            }

            response.on('data', chunk => {
                returnData = returnData + chunk;
            });

            response.on('end', () => {
                // we have now received the raw return data in the returnData variable.
                // We can see it in the log output via:
                console.log(JSON.stringify(returnData))
                // we may need to parse through it to extract the needed data

                let response = JSON.parse(returnData);
                // this will execute whatever the block of code that was passed to
                // httpGet and pass the JSON `response` to it.
                resolve(response);
            });

            response.on('error', error => {
                reject(error);
            });
        });
        request.end();
    });
}

// Creates the options object for an HTTPs GET Request
// Returns an object.
exports.buildHttpGetOptions = function buildHttpGetOptions(params) {
    let options = {
        hostname          : "newsreel-edu.aot.tu-berlin.de",
        path              : "/solr/d115/" + params, //buildQueryString(params),
        // port: port,
        method            : 'GET',
        rejectUnauthorized: false,
        auth              : "personal-assistent:AlexaAlexa0815."
    };
    return options;
}


//TODO might (not) need export! - complete with petmatch params
// Given a list of parameters it builds the query string for a request.
// Returns URI encoded string of parameters.
function buildQueryString(params) {
    let paramList = '';
    params.forEach((paramGroup, index) => {
        paramList += `${ index == 0 ? '?' : '&'}${encodeURIComponent(paramGroup[0])}=${encodeURIComponent(paramGroup[1])}`;
    });
    return paramList;

}


// an array to check against if a PLZ is in Berlin or not since Alexa gets the nearest answer and
// resolves 89102 to Pankow or so!

const blacklist = ['SO sechsunddreissig', 'S. O. sechsundreißig', 's o sechs und dreissig', 's. o. sechsunddreissig']

const listOfNoHyphenAreas = ['prenzlauer berg'];

exports.listOfPLZAsDigits =  ["10115", "10117", "10119", "10178", "10179", "10435", "10551", "10553", "10555", "10557",
    "10559", "10623", "10785", "10787", "10963", "10969", "13347", "13349", "13351", "13353", "13355", "13357", "13359",
    "13405", "13407", "13409", "10179", "10243", "10245", "10247", "10249", "10367", "10785", "10961", "10963", "10965",
    "10967",
    "10969", "10997", "10999", "12045", "10178", "10119", "10247", "10249", "10405", "10407", "10409", "10435", "10437",
    "10439", "13051", "13053", "13086", "13088", "13089", "13125", "13127", "13129", "13156", "13158", "13159", "13187",
    "13189", "10553", "10585", "10587", "10589", "10623", "10625", "10627", "10629", "10707", "10709", "10711", "10713",
    "10715",
    "10717", "10719", "10777", "10779", "10787", "10789", "10825", "13353", "13597", "13627", "13629", "14050", "14052",
    "14053",
    "14055", "14057", "14059", "14193", "14195", "14197", "14199", "13581", "13583", "13585", "13587", "13589", "13591",
    "13593", "13595", "13597", "13599", "13627", "13629", "14052", "14089", "12157", "12161", "12163", "12165", "12167",
    "12169", "12203", "12205", "12207", "12209", "12247", "12249", "12277", "12279", "14109", "14129", "14163", "14165",
    "14167",
    "14169", "14193", "14195", "14197", "14199", "10777", "10779", "10781", "10783", "10785", "10787", "10789", "10823",
    "10825", "10827", "10829", "10965", "12099", "12101", "12103", "12105", "12107", "12109", "12157", "12159", "12161",
    "12163", "12169", "12249", "12277", "12279", "12305", "12307", "12309", "12347", "14197", "10965", "10967", "12043",
    "12045", "12047", "12049", "12051", "12053", "12055", "12057", "12059", "12099", "12107", "12305", "12347", "12349",
    "12351",
    "12353", "12355", "12357", "12359", "12435", "12437", "12439", "12459", "12487", "12489", "12524", "12526", "12527",
    "12555", "12557", "12559", "12587", "12589", "12623", "", "12555", "12619", "12621", "12623", "12627", "12629",
    "12679", "12681", "12683", "12685", "12687", "12689", "10315", "10317", "10318", "10319", "10365", "10367", "10369",
    "13051", "13053", "13055", "13057", "13059", "13403", "13405", "13407", "13409", "13435", "13437", "13439", "13465",
    "13467", "13469", "13503", "13505", "13507", "13509", "13599", "13629"];

exports.listOfPLZ = ["zehn eins eins fünf",
    "zehn eins eins sieben",
    "zehn eins eins neun",
    "zehn eins sieben acht",
    "zehn eins sieben neun",
    "zehn vier drei fünf",
    "zehn fünf fünf eins",
    "zehn fünf fünf drei",
    "zehn fünf fünf fünf",
    "zehn fünf fünf sieben",
    "zehn fünf fünf neun",
    "zehn sechs zwei drei",
    "zehn sieben acht fünf",
    "zehn sieben acht sieben",
    "zehn neun sechs drei",
    "zehn neun sechs neun",
    "dreizehn drei vier sieben",
    "dreizehn drei vier neun",
    "dreizehn drei fünf eins",
    "dreizehn drei fünf drei",
    "dreizehn drei fünf fünf",
    "dreizehn drei fünf sieben",
    "dreizehn drei fünf neun",
    "dreizehn vier null fünf",
    "dreizehn vier null sieben",
    "dreizehn vier null neun",
    "zehn eins sieben neun",
    "zehn zwei vier drei",
    "zehn zwei vier fünf",
    "zehn zwei vier sieben",
    "zehn zwei vier neun",
    "zehn drei sechs sieben",
    "zehn sieben acht fünf",
    "zehn neun sechs eins",
    "zehn neun sechs drei",
    "zehn neun sechs fünf",
    "zehn neun sechs sieben",
    "zehn neun sechs neun",
    "zehn neun neun sieben",
    "zehn neun neun neun",
    "zwölf null vier fünf",
    "zehn eins sieben acht",
    "zehn eins eins neun",
    "zehn zwei vier sieben",
    "zehn zwei vier neun",
    "zehn vier null fünf",
    "zehn vier null sieben",
    "zehn vier null neun",
    "zehn vier drei fünf",
    "zehn vier drei sieben",
    "zehn vier drei neun",
    "dreizehn null fünf eins",
    "dreizehn null fünf drei",
    "dreizehn null acht sechs",
    "dreizehn null acht acht",
    "dreizehn null acht neun",
    "dreizehn eins zwei fünf",
    "dreizehn eins zwei sieben",
    "dreizehn eins zwei neun",
    "dreizehn eins fünf sechs",
    "dreizehn eins fünf acht",
    "dreizehn eins fünf neun",
    "dreizehn eins acht sieben",
    "dreizehn eins acht neun",
    "zehn fünf fünf drei",
    "zehn fünf acht fünf",
    "zehn fünf acht sieben",
    "zehn fünf acht neun",
    "zehn sechs zwei drei",
    "zehn sechs zwei fünf",
    "zehn sechs zwei sieben",
    "zehn sechs zwei neun",
    "zehn sieben null sieben",
    "zehn sieben null neun",
    "zehn sieben eins eins",
    "zehn sieben eins drei",
    "zehn sieben eins fünf",
    "zehn sieben eins sieben",
    "zehn sieben eins neun",
    "zehn sieben sieben sieben",
    "zehn sieben sieben neun",
    "zehn sieben acht sieben",
    "zehn sieben acht neun",
    "zehn acht zwei fünf",
    "dreizehn drei fünf drei",
    "dreizehn fünf neun sieben",
    "dreizehn sechs zwei sieben",
    "dreizehn sechs zwei neun",
    "vierzehn null fünf null",
    "vierzehn null fünf zwei",
    "vierzehn null fünf drei",
    "vierzehn null fünf fünf",
    "vierzehn null fünf sieben",
    "vierzehn null fünf neun",
    "vierzehn eins neun drei",
    "vierzehn eins neun fünf",
    "vierzehn eins neun sieben",
    "vierzehn eins neun neun",
    "dreizehn fünf acht eins",
    "dreizehn fünf acht drei",
    "dreizehn fünf acht fünf",
    "dreizehn fünf acht sieben",
    "dreizehn fünf acht neun",
    "dreizehn fünf neun eins",
    "dreizehn fünf neun drei",
    "dreizehn fünf neun fünf",
    "dreizehn fünf neun sieben",
    "dreizehn fünf neun neun",
    "dreizehn sechs zwei sieben",
    "dreizehn sechs zwei neun",
    "vierzehn null fünf zwei",
    "vierzehn null acht neun",
    "zwölf eins fünf sieben",
    "zwölf eins sechs eins",
    "zwölf eins sechs drei",
    "zwölf eins sechs fünf",
    "zwölf eins sechs sieben",
    "zwölf eins sechs neun",
    "zwölf zwei null drei",
    "zwölf zwei null fünf",
    "zwölf zwei null sieben",
    "zwölf zwei null neun",
    "zwölf zwei vier sieben",
    "zwölf zwei vier neun",
    "zwölf zwei sieben sieben",
    "zwölf zwei sieben neun",
    "vierzehn eins null neun",
    "vierzehn eins zwei neun",
    "vierzehn eins sechs drei",
    "vierzehn eins sechs fünf",
    "vierzehn eins sechs sieben",
    "vierzehn eins sechs neun",
    "vierzehn eins neun drei",
    "vierzehn eins neun fünf",
    "vierzehn eins neun sieben",
    "vierzehn eins neun neun",
    "zehn sieben sieben sieben",
    "zehn sieben sieben neun",
    "zehn sieben acht eins",
    "zehn sieben acht drei",
    "zehn sieben acht fünf",
    "zehn sieben acht sieben",
    "zehn sieben acht neun",
    "zehn acht zwei drei",
    "zehn acht zwei fünf",
    "zehn acht zwei sieben",
    "zehn acht zwei neun",
    "zehn neun sechs fünf",
    "zwölf null neun neun",
    "zwölf eins null eins",
    "zwölf eins null drei",
    "zwölf eins null fünf",
    "zwölf eins null sieben",
    "zwölf eins null neun",
    "zwölf eins fünf sieben",
    "zwölf eins fünf neun",
    "zwölf eins sechs eins",
    "zwölf eins sechs drei",
    "zwölf eins sechs neun",
    "zwölf zwei vier neun",
    "zwölf zwei sieben sieben",
    "zwölf zwei sieben neun",
    "zwölf drei null fünf",
    "zwölf drei null sieben",
    "zwölf drei null neun",
    "zwölf drei vier sieben",
    "vierzehn eins neun sieben",
    "zehn neun sechs fünf",
    "zehn neun sechs sieben",
    "zwölf null vier drei",
    "zwölf null vier fünf",
    "zwölf null vier sieben",
    "zwölf null vier neun",
    "zwölf null fünf eins",
    "zwölf null fünf drei",
    "zwölf null fünf fünf",
    "zwölf null fünf sieben",
    "zwölf null fünf neun",
    "zwölf null neun neun",
    "zwölf eins null sieben",
    "zwölf drei null fünf",
    "zwölf drei vier sieben",
    "zwölf drei vier neun",
    "zwölf drei fünf eins",
    "zwölf drei fünf drei",
    "zwölf drei fünf fünf",
    "zwölf drei fünf sieben",
    "zwölf drei fünf neun",
    "zwölf vier drei fünf",
    "zwölf vier drei sieben",
    "zwölf vier drei neun",
    "zwölf vier fünf neun",
    "zwölf vier acht sieben",
    "zwölf vier acht neun",
    "zwölf fünf zwei vier",
    "zwölf fünf zwei sechs",
    "zwölf fünf zwei sieben",
    "zwölf fünf fünf fünf",
    "zwölf fünf fünf sieben",
    "zwölf fünf fünf neun",
    "zwölf fünf acht sieben",
    "zwölf fünf acht neun",
    "zwölf sechs zwei drei",
    "zwölf fünf fünf fünf",
    "zwölf sechs eins neun",
    "zwölf sechs zwei eins",
    "zwölf sechs zwei drei",
    "zwölf sechs zwei sieben",
    "zwölf sechs zwei neun",
    "zwölf sechs sieben neun",
    "zwölf sechs acht eins",
    "zwölf sechs acht drei",
    "zwölf sechs acht fünf",
    "zwölf sechs acht sieben",
    "zwölf sechs acht neun",
    "zehn drei eins fünf",
    "zehn drei eins sieben",
    "zehn drei eins acht",
    "zehn drei eins neun",
    "zehn drei sechs fünf",
    "zehn drei sechs sieben",
    "zehn drei sechs neun",
    "dreizehn null fünf eins",
    "dreizehn null fünf drei",
    "dreizehn null fünf fünf",
    "dreizehn null fünf sieben",
    "dreizehn null fünf neun",
    "dreizehn vier null drei",
    "dreizehn vier null fünf",
    "dreizehn vier null sieben",
    "dreizehn vier null neun",
    "dreizehn vier drei fünf",
    "dreizehn vier drei sieben",
    "dreizehn vier drei neun",
    "dreizehn vier sechs fünf",
    "dreizehn vier sechs sieben",
    "dreizehn vier sechs neun",
    "dreizehn fünf null drei",
    "dreizehn fünf null fünf",
    "dreizehn fünf null sieben",
    "dreizehn fünf null neun",
    "dreizehn fünf neun neun",
    "dreizehn sechs zwei neun",

    "eins null eins eins fünf",
    "eins null eins eins sieben",
    "eins null eins eins neun",
    "eins null eins sieben acht",
    "eins null eins sieben neun",
    "eins null vier drei fünf",
    "eins null fünf fünf eins",
    "eins null fünf fünf drei",
    "eins null fünf fünf fünf",
    "eins null fünf fünf sieben",
    "eins null fünf fünf neun",
    "eins null sechs zwei drei",
    "eins null sieben acht fünf",
    "eins null sieben acht sieben",
    "eins null neun sechs drei",
    "eins null neun sechs neun",
    "eins drei drei vier sieben",
    "eins drei drei vier neun",
    "eins drei drei fünf eins",
    "eins drei drei fünf drei",
    "eins drei drei fünf fünf",
    "eins drei drei fünf sieben",
    "eins drei drei fünf neun",
    "eins drei vier null fünf",
    "eins drei vier null sieben",
    "eins drei vier null neun",
    "eins null eins sieben neun",
    "eins null zwei vier drei",
    "eins null zwei vier fünf",
    "eins null zwei vier sieben",
    "eins null zwei vier neun",
    "eins null drei sechs sieben",
    "eins null sieben acht fünf",
    "eins null neun sechs eins",
    "eins null neun sechs drei",
    "eins null neun sechs fünf",
    "eins null neun sechs sieben",
    "eins null neun sechs neun",
    "eins null neun neun sieben",
    "eins null neun neun neun",
    "eins zwei null vier fünf",
    "eins null eins sieben acht",
    "eins null eins eins neun",
    "eins null zwei vier sieben",
    "eins null zwei vier neun",
    "eins null vier null fünf",
    "eins null vier null sieben",
    "eins null vier null neun",
    "eins null vier drei fünf",
    "eins null vier drei sieben",
    "eins null vier drei neun",
    "eins drei null fünf eins",
    "eins drei null fünf drei",
    "eins drei null acht sechs",
    "eins drei null acht acht",
    "eins drei null acht neun",
    "eins drei eins zwei fünf",
    "eins drei eins zwei sieben",
    "eins drei eins zwei neun",
    "eins drei eins fünf sechs",
    "eins drei eins fünf acht",
    "eins drei eins fünf neun",
    "eins drei eins acht sieben",
    "eins drei eins acht neun",
    "eins null fünf fünf drei",
    "eins null fünf acht fünf",
    "eins null fünf acht sieben",
    "eins null fünf acht neun",
    "eins null sechs zwei drei",
    "eins null sechs zwei fünf",
    "eins null sechs zwei sieben",
    "eins null sechs zwei neun",
    "eins null sieben null sieben",
    "eins null sieben null neun",
    "eins null sieben eins eins",
    "eins null sieben eins drei",
    "eins null sieben eins fünf",
    "eins null sieben eins sieben",
    "eins null sieben eins neun",
    "eins null sieben sieben sieben",
    "eins null sieben sieben neun",
    "eins null sieben acht sieben",
    "eins null sieben acht neun",
    "eins null acht zwei fünf",
    "eins drei drei fünf drei",
    "eins drei fünf neun sieben",
    "eins drei sechs zwei sieben",
    "eins drei sechs zwei neun",
    "eins vier null fünf null",
    "eins vier null fünf zwei",
    "eins vier null fünf drei",
    "eins vier null fünf fünf",
    "eins vier null fünf sieben",
    "eins vier null fünf neun",
    "eins vier eins neun drei",
    "eins vier eins neun fünf",
    "eins vier eins neun sieben",
    "eins vier eins neun neun",
    "eins drei fünf acht eins",
    "eins drei fünf acht drei",
    "eins drei fünf acht fünf",
    "eins drei fünf acht sieben",
    "eins drei fünf acht neun",
    "eins drei fünf neun eins",
    "eins drei fünf neun drei",
    "eins drei fünf neun fünf",
    "eins drei fünf neun sieben",
    "eins drei fünf neun neun",
    "eins drei sechs zwei sieben",
    "eins drei sechs zwei neun",
    "eins vier null fünf zwei",
    "eins vier null acht neun",
    "eins zwei eins fünf sieben",
    "eins zwei eins sechs eins",
    "eins zwei eins sechs drei",
    "eins zwei eins sechs fünf",
    "eins zwei eins sechs sieben",
    "eins zwei eins sechs neun",
    "eins zwei zwei null drei",
    "eins zwei zwei null fünf",
    "eins zwei zwei null sieben",
    "eins zwei zwei null neun",
    "eins zwei zwei vier sieben",
    "eins zwei zwei vier neun",
    "eins zwei zwei sieben sieben",
    "eins zwei zwei sieben neun",
    "eins vier eins null neun",
    "eins vier eins zwei neun",
    "eins vier eins sechs drei",
    "eins vier eins sechs fünf",
    "eins vier eins sechs sieben",
    "eins vier eins sechs neun",
    "eins vier eins neun drei",
    "eins vier eins neun fünf",
    "eins vier eins neun sieben",
    "eins vier eins neun neun",
    "eins null sieben sieben sieben",
    "eins null sieben sieben neun",
    "eins null sieben acht eins",
    "eins null sieben acht drei",
    "eins null sieben acht fünf",
    "eins null sieben acht sieben",
    "eins null sieben acht neun",
    "eins null acht zwei drei",
    "eins null acht zwei fünf",
    "eins null acht zwei sieben",
    "eins null acht zwei neun",
    "eins null neun sechs fünf",
    "eins zwei null neun neun",
    "eins zwei eins null eins",
    "eins zwei eins null drei",
    "eins zwei eins null fünf",
    "eins zwei eins null sieben",
    "eins zwei eins null neun",
    "eins zwei eins fünf sieben",
    "eins zwei eins fünf neun",
    "eins zwei eins sechs eins",
    "eins zwei eins sechs drei",
    "eins zwei eins sechs neun",
    "eins zwei zwei vier neun",
    "eins zwei zwei sieben sieben",
    "eins zwei zwei sieben neun",
    "eins zwei drei null fünf",
    "eins zwei drei null sieben",
    "eins zwei drei null neun",
    "eins zwei drei vier sieben",
    "eins vier eins neun sieben",
    "eins null neun sechs fünf",
    "eins null neun sechs sieben",
    "eins zwei null vier drei",
    "eins zwei null vier fünf",
    "eins zwei null vier sieben",
    "eins zwei null vier neun",
    "eins zwei null fünf eins",
    "eins zwei null fünf drei",
    "eins zwei null fünf fünf",
    "eins zwei null fünf sieben",
    "eins zwei null fünf neun",
    "eins zwei null neun neun",
    "eins zwei eins null sieben",
    "eins zwei drei null fünf",
    "eins zwei drei vier sieben",
    "eins zwei drei vier neun",
    "eins zwei drei fünf eins",
    "eins zwei drei fünf drei",
    "eins zwei drei fünf fünf",
    "eins zwei drei fünf sieben",
    "eins zwei drei fünf neun",
    "eins zwei vier drei fünf",
    "eins zwei vier drei sieben",
    "eins zwei vier drei neun",
    "eins zwei vier fünf neun",
    "eins zwei vier acht sieben",
    "eins zwei vier acht neun",
    "eins zwei fünf zwei vier",
    "eins zwei fünf zwei sechs",
    "eins zwei fünf zwei sieben",
    "eins zwei fünf fünf fünf",
    "eins zwei fünf fünf sieben",
    "eins zwei fünf fünf neun",
    "eins zwei fünf acht sieben",
    "eins zwei fünf acht neun",
    "eins zwei sechs zwei drei",
    "eins zwei fünf fünf fünf",
    "eins zwei sechs eins neun",
    "eins zwei sechs zwei eins",
    "eins zwei sechs zwei drei",
    "eins zwei sechs zwei sieben",
    "eins zwei sechs zwei neun",
    "eins zwei sechs sieben neun",
    "eins zwei sechs acht eins",
    "eins zwei sechs acht drei",
    "eins zwei sechs acht fünf",
    "eins zwei sechs acht sieben",
    "eins zwei sechs acht neun",
    "eins null drei eins fünf",
    "eins null drei eins sieben",
    "eins null drei eins acht",
    "eins null drei eins neun",
    "eins null drei sechs fünf",
    "eins null drei sechs sieben",
    "eins null drei sechs neun",
    "eins drei null fünf eins",
    "eins drei null fünf drei",
    "eins drei null fünf fünf",
    "eins drei null fünf sieben",
    "eins drei null fünf neun",
    "eins drei vier null drei",
    "eins drei vier null fünf",
    "eins drei vier null sieben",
    "eins drei vier null neun",
    "eins drei vier drei fünf",
    "eins drei vier drei sieben",
    "eins drei vier drei neun",
    "eins drei vier sechs fünf",
    "eins drei vier sechs sieben",
    "eins drei vier sechs neun",
    "eins drei fünf null drei",
    "eins drei fünf null fünf",
    "eins drei fünf null sieben",
    "eins drei fünf null neun",
    "eins drei fünf neun neun",
    "eins drei sechs zwei neun"


];

//no capitals or hyphens - depends on how Lex interprets the words so might need to change in case Amazon decides to
// capitalize at any time in the future
exports.listOfAreas = ["oberschöneweide", "müggelheim", "johannisthal", "friedrichshagen", "baumschulenweg",
    "altglienicke", "schmöckwitz", "plänterwald", "niederschöneweide", "grünau", "bohnsdorf", "alt-treptow",
    "adlershof", "schöneweide", "köpenick", "friedenau", "mariendorf", "marienfelde", "lichtenrade", "schöneberg",
    "tempelhof", "wannsee", "nikolassee", "lichterfelde", "dahlem", "zehlendorf", "steglitz", "lankwitz",
    "wilhelmstadt", "staaken", "siemensstadt", "haselhorst", "gatow", "falkenhagener feld", "wasserstadt", "kladow",
    "waldmanslust", "lübars", "konradshöhe", "frohnau", "borgiswalde", "wittenau", "heiligensee", "märkisches viertel",
    "tegel", "hermsdorf", "reinickendorf ost", "malchow", "stadtrandsiedlung malchow", "heinersdorf", "blankenburg",
    "wilhelmsruh", "rosenthal", "niederschönhausen", "blankenfelde", "alt pankow", "französisch buchholz", "buchholz",
    "buch", "karow", "weißensee", "prenzlauer berg", "britz", "nord neukölln", "gropiusstadt", "buckow",
    "blaschkoallee", "sonnenallee", "zwickauer damm", "alt buckow", "rudow", "hansaviertel", "moabit", "gesundbrunnen",
    "wedding", "tiergarten", "hellersdorf", "marzahn", "mahlsdorf", "marzahner promenade", "helle mitte", "biesdorf",
    "malchow", "falkenberg", "wartenberg", "neu hohen schönhausen", "hohenschönhausen", "hsh", "alt hohen schön hausen", "fennpfuhl",
    "alt lichtenberg", "frierdrichsfelde", "karlshorst", "rummelsburg", "zentrum ikraus", "am obersee", "käthe kern",
    "anton saefkow", "große leege ", "alt hohen schön hausen", "tierparkcenter", "normannen", "egon erwin kirsch",
    "neu hohen schön hausen", "friedrichshain", "SO sechs und dreißig", "boxhagen", "boxi", "stralau",
    "schlesische straße", "frankfurter allee", "kreuzberg", "yorkstraße", "charlottenburg", "charlottenburg Nord",
    "grunewald", "halensee", "schmargendorf", "westend", "wilmersdorf", "halemweg", "heerstraße", "hohenzollerndamm",
    "wilmersdorfer", "h s h"];

exports.listOfComboDistricts = ["Friedrichshain-Kreuzberg", "Charlottenburg-Wilmersdorf", "Lichtenberg",
    "Marzahn-Hellersdorf", "Mitte", "Neukölln", "Pankow", "Reinickendorf", "Spandau", "Steglitz-Zehlendorf",
    "Tempelhof-Schöneberg", "Treptow-Köpenick"];

// we prefer to keep them in this order because these are proper names. Anne-Luise != Luise-Anne
exports.listOfComboDistrictsNoHyphens = ["friedrichshain kreuzberg", "charlottenburg wilmersdorf", "lichtenberg",
    "marzahn hellersdorf", "mitte", "neukölln", "pankow", "reinickendorf", "spandau", "steglitz zehlendorf",
    "tempelhof schöneberg", "treptow köpenick"];

