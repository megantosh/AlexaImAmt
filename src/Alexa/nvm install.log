=> Appending source string to /Users/mghd/.bashrc
npm ERR! peer dep missing: @angular/core@^2.2.0, required by @angular/material@2.0.0-beta.1
npm ERR! peer dep missing: @angular/common@^2.2.0, required by @angular/material@2.0.0-beta.1
npm ERR! peer dep missing: @angular/http@^2.2.0, required by @angular/material@2.0.0-beta.1
npm ERR! peer dep missing: @angular/common@^2.2.0, required by @angular/material@2.0.0-beta.1
npm ERR! peer dep missing: @angular/common@^2.0.2, required by angular2-mdl@2.11.0
npm ERR! peer dep missing: @angular/core@^2.2.0, required by @angular/material@2.0.0-beta.1
npm ERR! peer dep missing: @angular/core@^2.0.2, required by angular2-mdl@2.11.0
npm ERR! peer dep missing: @angular/forms@^2.0.2, required by angular2-mdl@2.11.0
npm ERR! peer dep missing: @angular/http@^2.2.0, required by @angular/material@2.0.0-beta.1
npm ERR! peer dep missing: rxjs@5.0.0-rc.4, required by angular-in-memory-web-api@0.1.17
npm ERR! peer dep missing: zone.js@^0.7.2, required by angular-in-memory-web-api@0.1.17
=> You currently have modules installed globally with `npm`. These will no
=> longer be linked to the active version of Node when you install a new node
=> with `nvm`; and they may (depending on how you construct your `$PATH`)
=> override the binaries of modules installed with `nvm`:

/usr/local/lib
├── UNMET PEER DEPENDENCY @angular/common@^2.2.0
├── UNMET PEER DEPENDENCY @angular/core@^2.2.0
├── UNMET PEER DEPENDENCY @angular/http@^2.2.0
├── @angular/material@2.0.0-beta.1
├── angular-quickstart@1.0.0
├── npm-check-updates@2.8.9
├── rxjs@5.0.0-rc.4
└── typings@2.1.0

=> If you wish to uninstall them at a later point (or re-install them under your
=> `nvm` Nodes), you can remove them from the system Node as follows:

     $ nvm use system
     $ npm uninstall -g a_module
